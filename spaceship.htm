<html>

<head>
    <title>SpaceShip</title>
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">

    <script type="text/javascript" src="gl-matrix.js"></script>
    <script type="text/javascript" src="game-utils.js"></script>
    <script type="text/javascript" src="fbo.js"></script>
    <script type="text/javascript" src="heightfield.js"></script>
    <script type="text/javascript" src="background.js"></script>

    <script type="text/javascript" src="models/modelObj.js"></script>
    <script type="text/javascript" src="models/splat.js"></script>
    <script type="text/javascript" src="models/plane.js"></script>

    <script type="text/javascript" src="entity/baseEntity.js"></script>
    <script type="text/javascript" src="entity/enemy_1.js"></script>
    <script type="text/javascript" src="entity/player.js"></script>



    <script type="text/javascript" src="gameManager-utils.js"></script>


    <script id="heightfield-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          // projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="heightfield-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec2 uOffset;
      uniform float uAmplitude; // amplitude du bruit
      uniform float uFrequency; // frequence du bruit
      uniform float uPersistence; // persistence du bruit

    in vec2 vTextureCoord; // recuperation de la coord rasterisee

      out vec4 outColor;
      
      float hash(vec2 p) {
	  // pseudo random fonction
	  float h = dot(mod(p,vec2(100.0)),vec2(127.1,311.7));
	  return -1.0 + 2.0*fract(sin(h)*43758.5453123);
      }

      float vnoise(in vec2 p) {
	  // genere une valeur random sur une position spécifique d'une grille
	  // pris sur shadertoy
	  vec2 i = floor(p);
	  vec2 f = fract(p);
	  
	  vec2 u = f*f*(3.0-2.0*f);

	  return mix( mix( hash( i + vec2(0.0,0.0) ), 
			   hash( i + vec2(1.0,0.0) ), u.x),
                      mix( hash( i + vec2(0.0,1.0) ), 
			   hash( i + vec2(1.0,1.0) ), u.x), u.y);
      }

      float fractalNoise(in vec2 p) {
	  const int nb = 5; // nb octave
	  float f = uFrequency; // frequency
	  float a = uAmplitude; // amplitude
	  float e = uPersistence; // persistence

	  float n = 0.0;
	  for(int i=0;i<nb;++i) {
              n = n + a*vnoise(p*f);
              f = 2.0*f;
              a = a*e;
	  }
	  return n;
      }

      void main(void) {
	  vec2 p = vTextureCoord*2.0-vec2(1.0); // coordonnees
	  float n = fractalNoise(p+uOffset)*0.5+0.5; // bruit
	  n = n*smoothstep(0.0,0.1,n); // surface plate (eau)
	  outColor = vec4(vec3(n),1.0);

      }
    </script>

    <script id="background-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          // projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="background-fs" type="x-shader/x-fragment">#version 300 es
        // *** le fragment shader ***
        precision highp float; // precision des nombres flottant

        uniform vec3 uLight;
        uniform sampler2D uHeightfield; // la texture de hauteurs
        in vec2 vTextureCoord; // recuperation de la coord rasterisee
        out vec4 outColor;

        vec3 computeNormal() {
            const float scale = 20.0;

            vec2 ps = 1.0/vec2(textureSize(uHeightfield,0));
            float xp = texture(uHeightfield,vTextureCoord+vec2( ps.x,0.0)).x;
            float xm = texture(uHeightfield,vTextureCoord+vec2(-ps.x,0.0)).x;
            float yp = texture(uHeightfield,vTextureCoord+vec2(0.0, ps.y)).x;
            float ym = texture(uHeightfield,vTextureCoord+vec2(0.0,-ps.y)).x;

            float gx = 0.5*(xp-xm)*scale;
            float gy = 0.5*(yp-ym)*scale;

            vec3 v1 = normalize(vec3(1.0,0.0,gx));  
            vec3 v2 = normalize(vec3(0.0,1.0,gy));

            return cross(v1,v2);
        }

        void main(void) {
            float d = texture(uHeightfield,vTextureCoord).x;
            vec3 n = normalize(computeNormal());
            vec3 l = normalize(vec3(0.,-.8,.7));
            vec3 color;
            vec3 r = reflect(l,n);
            vec3 v = vec3(0.0, 0.0,-1.0);

            if( d < 0.05) {
                //blue
                color = vec3(0.,0.,1.);
            }
            if( d >= 0.05) {
                // brown
                color = normalize(vec3(160, 116, 69));
            } 
            if( d >= 0.3) {
                //green
                color = normalize(vec3(87,213,59));
            }
            if( d >= 0.8) {
                //gray
                color = normalize(vec3(146,142,133));
           }
            
           //float q = 500.0; // shineyness
           //vec3 Ks = vec3(1.0,1.0,1.0); // color reflect
           //float spec = pow(max(dot(r,v),0.0),q);

           float diff = max(dot(l,n),0.0); //dot = produit scalaire 
           vec3 finalColor = color * diff;// +  Ks*spec;
           outColor = vec4(finalColor,1.0);

        }
    </script>

    <script id="model-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition;
      layout(location=1) in vec3 aVertexNormal;
      
      uniform mat4 uModelMatrix;
      uniform mat4 uViewMatrix;
      uniform mat4 uProjMatrix;
      
      out vec3 vNormal;

      void main(void) {
          // projection de la position
          gl_Position = uProjMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);
          vNormal = mat3(inverse(transpose(uViewMatrix * uModelMatrix)))*normalize(aVertexNormal); // équivaut à norme(V * M * p[x,y,z]) 
      }
    </script>

    <script id="model-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision mediump float; // precision des nombres flottant
    
    uniform vec3 uLight;
    in vec3 vNormal;
      out vec4 outColor;

      void main(void) {
        // Shading
	    vec3 n = normalize(vNormal);
        vec3 l = normalize(uLight);
        // Reflect
        vec3 r = reflect(l,n);
        vec3 v = vec3(0.0, 0.0,-1.0);

        vec3 Kd = vec3(1.0,.65,.2); // color shading
        vec3 Ks = vec3(1.0,1.0,1.0); // color reflect

        float q = 15.0; // shineyness
        float diff = max(dot(l,n),0.0); //dot = produit scalaire 
        float spec = pow(max(dot(r,v),0.0),q);
        
        vec3 finalColor = Kd*diff + Ks*spec;
        // la couleur est attribuee au fragment courant
        outColor = vec4(finalColor,1.);
      }
    </script>

    <script id="splat-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 
      
      uniform vec2 uPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee
      
      void main(void) {
	  // projection de la position
	  gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);
	  
	  // stockage de la coordonnee de texture
	  vTextureCoord = aVertexCoord;
      }
    </script>

    <script id="splat-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant
      
        uniform sampler2D uTex;
      in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;
      
      void main(void) {
          outColor = texture(uTex, vTextureCoord);
	  //float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));
	  //outColor = vec4(alpha*vec3(1,0,0),alpha);
      }
    </script>

    <script type="text/javascript">
        var fbo;
        var heightfield;
        var background;
        var player;
        var shootSamples;
        var splatTex;
        var width
        var height;
        var delayBetweenRepeatKey = 150;
        var canPressKey = true;
        var enemies;
        var enemyLevel;
        var shotLevel;
        var pause = false;

        var lightning = 0;

        var entities = [];
        var modelsData = {};
        var id_spawnE;

        function drawScene() {
            // initialisation du viewport
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

            // efface les buffers de couleur et de profondeur
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            // A DECOMMENTER POUR TRAVAILLER SUR LE FOND 
            // // creation des hauteurs dans une texture
            gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.id());

            gl.useProgram(heightfield.shader());
            heightfield.sendUniformVariables();
            heightfield.draw();

            gl.bindFramebuffer(gl.FRAMEBUFFER, null);

            gl.useProgram(background.shader());
            background.sendUniformVariables();
            background.draw();

            if(player) {
                gl.useProgram(player.model.shader);
                player.model.sendUniformVariables();
                player.model.draw();
            }

            // test pour afficher un splat quand on appuie sur espace 
            shootSamples.forEach(s => {
                // activation de la transparence 
                gl.enable(gl.BLEND);
                gl.useProgram(s.shader());
                s.sendUniformVariables();
                s.draw();
                // on desactive la transparence 
                gl.disable(gl.BLEND);
            });
            enemies.forEach( e => {
                gl.useProgram(e.model.shader);
                e.model.sendUniformVariables();
                e.model.draw();
            })
        }

        // une bonne maniere de gerer les evenements claviers
        var currentlyPressedKeys = {};

        function handleKeyDown(event) {
                currentlyPressedKeys[event.keyCode] = true;
        }


        function handleKeyUp(event) {
            currentlyPressedKeys[event.keyCode] = false;
        }

        function handleKeys() {
            if (currentlyPressedKeys[33]) {
                // Page Up (par exemple)
                // faire quelque chose... 
            }

            // vous pouvez utiliser ce genre de fonction
            // pour faire bouger votre vaisseau 
            if (currentlyPressedKeys[68]) { // D
                player.move(0, 1);
                player.setRotating(true);
            }

            if (currentlyPressedKeys[81]) { // Q
                player.move(0, -1);
                player.setRotating(true);
            }

            if (currentlyPressedKeys[90]) { // Z
                player.move(1, 0);
            }

            if (currentlyPressedKeys[83]) { // S
                player.move(-1, 0);
            }

            if (currentlyPressedKeys[77]) { // M
                if(canPressKey) {
                    newEnemy = new Enemy_1(new Model(modelsData.plane))
                    enemies.push(newEnemy);
                    entities.push(newEnemy);

                    let indx = enemies.length-1;
                    setTimeout(() => {
                        enemies[indx].destroy();
                    }, 1000);
                    canPressKey = false;
                    setTimeout(() => {
                        canPressKey = true;
                    }, delayBetweenRepeatKey);
                }

            }

            if (currentlyPressedKeys[32]) { // SPACE
                if(player.canShoot) {
                    let s = new Splat(splatTex);
                    s.setPosition(player.model.getBBox()[1][0] + ((player.model.getBBox()[0][0] - player.model.getBBox()[1][0]) / 2), player.model.getBBox()[0][1]);
                    shootSamples.push(s);
                    player.canShoot = false;
                    //console.log(shootSamples.length);
                    setTimeout(() => {
                        player.canShoot = true;
                    }, player.delayShoot);
                } 
            }

            if(!currentlyPressedKeys[68] && !currentlyPressedKeys[81]) {
              if(player)
                player.setRotating(false);
            }

        }

        function mouseMove(event) {
            // recup evenement souris 
            //var newx = 2.0*(event.clientX/gl.viewportWidth)-1.0;
            //var newy = -(2.0*(event.clientY/gl.viewportHeight)-1.0);
        }


        // animation 
        var lastTime = 0;
        function animate() {
            var timeNow = new Date().getTime();
            if (lastTime != 0) {
                // anime chacun des objets de la scene
                // si necessaire (en fonction du temps ecoul�)
                var elapsed = timeNow - lastTime;
                heightfield.setParameters(elapsed);
                if(player) {
                    player.model.setParameters(elapsed);
                }
                background.setParameters(elapsed);
                shootSamples.forEach(s => {
                    s.setParameters(elapsed);
                });
                entities.forEach( e => {
                    e.setParameters(elapsed);
                });

            }
            lastTime = timeNow;
        }

        function spawnEnemies() {
            if(!id_spawnE) {
            var timeout_random = Math.random()*1000 * 8;
            var num_enemies = Math.random() + 1 * 5;
                id_spawnE = setTimeout(() => {
                    for(var i=0;i<num_enemies;i++) {
                        var newEnemy = new Enemy_1(new Plane(modelsData.plane.data, modelsData.plane.bufferOpt))
                        enemies.push(newEnemy);
                        entities.push(newEnemy);
                    }
                    id_spawnE = null;
                }, timeout_random);
            }

        }
        // moteur de jeu
        function gameManager() {
            
            
           //spawnEnemies();
            
            /* Manage objects */
            shootSamples = shootSamples.filter(s => s.loaded);
            entities = entities.filter(e => e.isLoaded());
            entities.forEach( (e) => {
                e.model.setLightValue(lightning);
            })
            enemies.forEach( e => {
                e.move(-1,0);
            });

            lightning += 0.01;
        }

        function tick() {
            if (!pause) {
                requestAnimFrame(tick);
                handleKeys();
                gameManager();
                drawScene();
                animate();
            }
        }


        function webGLStart() {
            // initialisation du canvas et des objets OpenGL
            var canvas = document.getElementById("SpaceShip");
            canvas.width = window.innerHeight*.95;
            canvas.height = window.innerHeight*.95;
            width = canvas.width;
            height = canvas.height;
            initGL(canvas);

            fbo = new FBO(canvas.width, canvas.height, 1, false);

            initHeightfieldShader();
            initBackgroundShader();
            initSplatShader();
            loadModel('obj/plane.obj').then( (objData) => {
                var planeObj = new Plane(objData);
                modelsData = { 
                    plane : {
                        data: objData, 
                        bufferOpt: {vertexBuffer: planeObj.vertexBuffer, normalBuffer: planeObj.normalBuffer}
                    }
                }
                console.log(modelsData.plane);
                player = new Player( new Plane(modelsData.plane.data, modelsData.plane.bufferOpt));
                entities.push(player);
            })
            splatTex = initTexture('textures/airplane.png');

            heightfield = new Heightfield();
            background = new Background(fbo.texture(0));

            shootSamples = [];
            enemies = [];

            // la couleur de fond sera noire
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // active le teste de profondeur 
            gl.enable(gl.DEPTH_TEST);
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

            /* Mouse and keyboard interaction functions */
            //canvas.addEventListener('mousedown', tbMouseDown, true);
            //canvas.addEventListener('mousemove', mouseMove, true);
            //canvas.addEventListener('mouseup', tbMouseUp, true);    
            document.onkeydown = handleKeyDown;
            document.onkeyup = handleKeyUp;

            // dessine la scene
            tick();
        }

        function getUserValues() {
            var radiosEnemy = document.getElementsByName('enemy');
            for(var i = 0; i < radiosEnemy.length; i++){
                if(radiosEnemy[i].checked){
                    enemyLevel = radiosEnemy[i].value;
                }
            }

            var radiosShot = document.getElementsByName('shot');
            for(var i = 0; i < radiosShot.length; i++){
                if(radiosShot[i].checked){
                    shotLevel = radiosShot[i].value;
                }
            }
        }
        function startGame() {
            getUserValues();
            var startButton = document.getElementById('startButton');
            var pauseButton = document.getElementById('pauseButton');
            var restartButton = document.getElementById('restartButton');
            startButton.style.display ="none";
            pauseButton.style.display = "visible";
            restartButton.style.display = "visible";

            document.getElementById('playButton').blur();
            document.getElementById('pauseButton').blur();
            document.getElementById('restartButton').blur();
            document.getElementById('SpaceShip').focus();
            webGLStart();
        }

        function restartGame() {
            var r = confirm("Are you sure you want to restart game?");
            document.getElementById('restartButton').blur();
            document.getElementById('SpaceShip').focus();
            if (r == true) {
                getUserValues();
                webGLStart();
            }
        }

        function pauseGame() {
            if (!pause) {
                document.getElementById('pauseButton').value = "Resume";
            }else {
                document.getElementById('pauseButton').value = "Pause";
            }
            document.getElementById('pauseButton').blur();
            document.getElementById('SpaceShip').focus();
            pause = !pause;
            tick();
        }
    </script>

    <link rel="stylesheet" href="./style/css/global.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
</head>


<body onload="">
    <canvas id="SpaceShip" style="border: none; float: left;" width="800" height="800"></canvas>
    <div style="float: left; width: 25%">
        <fieldset>
            <legend>Menu</legend>
            <p>Select enemys level :</p>
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-outline-success active">
                    <input type="radio" id="easyEnemy" name="enemy" value="1"  checked> Easy
                </label>
                <label class="btn btn-outline-warning">
                    <input type="radio" id="mediumEnemy" name="enemy" value="2"> Medium
                </label>
                <label class="btn btn-outline-danger">
                    <input type="radio" id="hardEnemy" name="enemy" value="3"> Hard
                </label>
            </div>
            <p>Select shots level :</p>
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-outline-success active">
                    <input type="radio" id="easyShot" name="shot" value="1"  checked> Easy
                </label>
                <label class="btn btn-outline-warning">
                    <input type="radio" id="mediumShot" name="shot" value="2"> Medium
                </label>
                <label class="btn btn-outline-danger">
                    <input type="radio" id="hardShot" name="shot" value="3"> Hard
                </label>
            </div>
            <hr>
            <input class="btn btn-secondary" type="button" value="Play" id="startButton" onclick="startGame()"/>
            <input class="btn btn-secondary" type="button" value="Pause" id="pauseButton" onclick="pauseGame()"/>
            <input class="btn btn-secondary" type="button" value="Restart" id="restartButton" onclick="restartGame()"/>
        </fieldset>
    </div>
</body>

</html>